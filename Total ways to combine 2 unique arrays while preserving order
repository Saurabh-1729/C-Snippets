#include <bits/stdc++.h>
using namespace std;

const int MOD = 1e9 + 7;

// Computes a^b % MOD
long long power(long long a, long long b) {
    long long res = 1;
    a %= MOD;
    while (b) {
        if (b & 1) res = (res * a) % MOD;
        a = (a * a) % MOD;
        b >>= 1;
    }
    return res;
}

// Precompute factorials
vector<long long> fact(2e5 + 1);

void precomputeFactorials(int N) {
    fact[0] = 1;
    for (int i = 1; i <= N; i++) {
        fact[i] = (fact[i - 1] * i) % MOD;
    }
}

// Computes nCr % MOD
long long nCr(int n, int r) {
    if (r > n) return 0;
    long long denom = (fact[r] * fact[n - r]) % MOD;
    return (fact[n] * power(denom, MOD - 2)) % MOD;
}

int countMergedSequences(int m, int n) {
    precomputeFactorials(m + n);
    return nCr(m + n, m);  // Or nCr(m + n, n)
}

int main() {
    int m = 2, n = 2;  // A = {1,2}, B = {3,4}
    cout << countMergedSequences(m, n) << endl;  // Output: 6
    return 0;
}
