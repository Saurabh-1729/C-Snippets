#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
const int MOD = 1e9 + 7;

vector<vector<ll>> multiply(const vector<vector<ll>> &A, const vector<vector<ll>> &B) {
    int n = A.size();
    vector<vector<ll>> C(n, vector<ll>(n, 0));
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < n; ++j)
            for (int k = 0; k < n; ++k)
                C[i][j] = (C[i][j] + A[i][k] * B[k][j]) % MOD;
    return C;
}

vector<vector<ll>> power(vector<vector<ll>> A, ll p) {
    int n = A.size();
    vector<vector<ll>> res(n, vector<ll>(n));
    for (int i = 0; i < n; ++i) res[i][i] = 1; // Identity matrix

    while (p > 0) {
        if (p % 2) res = multiply(res, A);
        A = multiply(A, A);
        p /= 2;
    }
    return res;
}

ll computeF(ll n, ll a, ll b) {
    //f(0) = a and f(1) = b
    if (n == 0) return a;
    if (n == 1) return b;

    vector<vector<ll>> T = {
        {2, 3},
        {1, 0}
    };

    vector<vector<ll>> T_n = power(T, n - 1);

    return (T_n[0][0] * b % MOD + T_n[0][1] * a % MOD) % MOD;
}


/*

---

### ðŸ§  The Idea

If you have a **linear recurrence** like this:

$$
a(n) = c_1 \cdot a(n-1) + c_2 \cdot a(n-2) + \dots + c_k \cdot a(n-k)
$$

You can express this recurrence in **matrix form** using a $k \times k$ matrix that, when exponentiated and multiplied with an initial vector, gives you $a(n)$.

---

### ðŸ”§ Step-by-Step to Build the Matrix

Letâ€™s take an example:

$$
a(n) = 2a(n-1) + 3a(n-2)
$$

This is a **2nd-order recurrence**, so you need a **2Ã—2 matrix**.

---

#### âœ… Step 1: Express recurrence as a system

We want to transform:

$$
\begin{bmatrix}
a(n) \\
a(n-1)
\end{bmatrix}
=
T \cdot
\begin{bmatrix}
a(n-1) \\
a(n-2)
\end{bmatrix}
$$

---

#### âœ… Step 2: Find the matrix `T`

$$
T = \begin{bmatrix}
2 & 3 \\
1 & 0
\end{bmatrix}
$$

Why?

$$
\begin{bmatrix}
a(n) \\
a(n-1)
\end{bmatrix}
=
\begin{bmatrix}
2 & 3 \\
1 & 0
\end{bmatrix}
\cdot
\begin{bmatrix}
a(n-1) \\
a(n-2)
\end{bmatrix}
$$

This works because:

* Top row implements the recurrence: `a(n) = 2*a(n-1) + 3*a(n-2)`
* Bottom row shifts values: `a(n-1) = a(n-1)`, `a(n-2) = a(n-2)`

---

### âœ… General Form for k-th Order Recurrence

If:

$$
a(n) = c_1 a(n-1) + c_2 a(n-2) + \dots + c_k a(n-k)
$$

The **kÃ—k transition matrix** `T` is:

$$
T = \begin{bmatrix}
c_1 & c_2 & c_3 & \cdots & c_k \\
1   & 0   & 0   & \cdots & 0 \\
0   & 1   & 0   & \cdots & 0 \\
\vdots & \vdots & \ddots & \ddots & \vdots \\
0   & 0   & \cdots & 1 & 0
\end{bmatrix}
$$

The first row contains the recurrence coefficients, and the lower rows shift the state vector.

---

### ðŸ“Œ Summary

| Recurrence                          | Transition Matrix                  |
| ----------------------------------- | ---------------------------------- |
| Fibonacci: `F(n) = F(n-1) + F(n-2)` | `[[1,1],[1,0]]`                    |
| `a(n) = 2a(n-1) + 3a(n-2)`          | `[[2,3],[1,0]]`                    |
| k-th order                          | Top row: coefficients, rest: shift |

---

Let me know if you'd like a **template code** that builds the transition matrix for any recurrence automatically!

*/
