#include <bits/stdc++.h>
using namespace std;

// Function to perform Modular Addition
int modAdd(int a, int b, int m)
{
    return ((a % m) + (b % m)) % m;
}

// Function to perform Modular Subtraction
int modSub(int a, int b, int m)
{
    return ((a % m) - (b % m) + m)
        % m; // Adding m to handle negative numbers
}

// Function to perform Modular Multiplication
int modMul(int a, int b, int m)
{
    return ((a % m) * (b % m)) % m;
}

// Function to calculate power of a number
int power(int x, unsigned int y, int p)
{
    int res = 1;
    x = x % p;
    if (x == 0)
        return 0;
    while (y > 0) {
        if (y & 1)
            res = (res * x) % p;
        y = y >> 1;
        x = (x * x) % p;
    }
    return res;
}

// Function to find modular inverse of a under modulo m
// Assumption: m is prime
int modInverse(int a, int m) { return power(a, m - 2, m); }

// Function to perform Modular Division
int modDiv(int a, int b, int m)
{
    a = a % m;
    int inv = modInverse(b, m);
    return (inv * a) % m;
}

int main()
{
    int a = 10, b = 20, m = 7;
    cout << "Modular Addition: " << modAdd(a, b, m) << endl;
    cout << "Modular Subtraction: " << modSub(a, b, m)
        << endl;
    cout << "Modular Multiplication: " << modMul(a, b, m)
        << endl;
    cout << "Modular Division: " << modDiv(a, b, m) << endl;
    return 0;
}
