ll largestPower(ll n, ll p)
{
    int x = 0;

    while (n)
    {
        n /= p;
        x += n;
    }
    return x;
}

ll power(ll x, ll y, ll p)
{
    int res = 1;
    x = x % p;
    // equal to p
    while (y > 0)
    {
        // If y is odd, multiply x with result
        if (y & 1)
            res = (res * x) % p;

        // y must be even now
        y = y >> 1; // y = y/2
        x = (x * x) % p;
    }
    return res;
}

ll modFact(ll n, ll p)
{
    if (n >= p)
        return 0;

    ll res = 1;
    bool isPrime[n + 1];
    memset(isPrime, 1, sizeof(isPrime));
    for (int i = 2; i * i <= n; i++)
    {
        if (isPrime[i])
        {
            for (int j = 2 * i; j <= n; j += i)
                isPrime[j] = 0;
        }
    }
    
    for (int i = 2; i <= n; i++)
    {
        if (isPrime[i])
        {
            ll k = largestPower(n, i);
            res = (res * power(i, k, p)) % p;
        }
    }
    return res;
}
